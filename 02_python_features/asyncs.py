# 异步编程：多线程、多进程、协程
# concurrent.futures模块 ThreadPoolExecutor和ProcessPoolExecutor
# 通过submit函数提交执行的函数到线程池中，submit函数立即返回，不阻塞
# done方法用于判定某个任务是否完成
# cancel方法用于取消某个任务,该任务没有放入线程池中才能取消成功
# result方法可以获取task的执行结果
# as_completed方法一次取出所有任务的结果，as_completed()方法是一个生成器，在没有任务完成的时候，会阻塞，在有某个任务完成的时
# 候，会yield这
# 个任务，就能执行for循环下面的语句，然后继续阻塞住，循环到所有的任务结束。从结果也可以看出，先完成的任务会先通知主线程。
# map方法，无需提前使用submit方法，map方法与python标准库中的map含义相同，都是将序列中的每个元素都执行同一个函数。
# wait方法可以让主线程阻塞，直到满足设定的要求
# future的设计理念很棒，在线程池/进程池和携程中都存在future对象，是异步编程的核心。
# ThreadPoolExecutor 让线程的使用更加方便，减小了线程创建/销毁的资源损耗，无需考虑线程间的复杂同步，方便主线程与子线程的交互。
# 线程池的抽象程度很高，多线程和多进程的编码接口一致。
# 协程是也是实现多任务的一种方式
# 协程yield的代码实现
# gevent内部封装的greenlet，其原理是当一个greenlet遇到IO(指的是input output 输入输出，比如网络、文件操作等)操作时，比如访问网
# 络，就自动
# 切换到其他的greenlet，等到IO操作完成，再在适当的时候切换回来继续执行。
# 由于IO操作非常耗时，经常使程序处于等待状态，有了gevent为我们自动切换协程，就保证总有greenlet在运行，而不是等待IO

